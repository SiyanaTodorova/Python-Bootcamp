name: My GitHub Action Workflow
on:
  workflow_dispatch:
    inputs:
      list_of_values:
        description: 'Enter a list of values (comma-separated)'
        required: true
      branch_name:
        description: 'Enter the name of the branch to switch to'
        required: true
      environment:
        type: choice
        options:
        - development
        - test
      target_db:
        type: string
        description: "Database"
        default: "CUR"
      target_schema:
        type: string
        description: "Schema"
        default: "SD"
      table:
        type: string
        description: "Specific table (* for all)"
        default: "*"
      hist_cut_off_dt:
        type: string
        description: "History cut off date to be used as part as part of the initial load."
        default: '2023-02-23 23:59:59.999'

 
permissions:
  contents: read
  issues: read
  checks: write

jobs:
  list_of_values_job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use the list of values input
        run: |
          list_of_values="${{ inputs.list_of_values }}"
          FS=',' read -ra values <<< "$list_of_values"
          
          # Now you have individual values in the 'values' array
          for value in "${values[@]}"; do
            echo "Value: $value"
          done

  switch_branch_job:
    runs-on: ubuntu-latest
    env: 
      BRANCH_NAME : ${{ github.event.inputs.branch_name }} 
    steps:
    - uses: actions/checkout@v1
      with:  
        ref: ${{ github.event.inputs.branch_name }}
    - name: Check
      run: |
          #echo -e 'Running on default: ${{ steps.branch-name.outputs.current_branch }}   
          echo -e 'var name: ${{ github.event.inputs.branch_name }}'
      
  HistoryLoad:
    runs-on: [ self-hosted, aws ]
    timeout-minutes: 720
    environment: ${{ github.event.inputs.environment }}
    env:
      USER: ""
      ROLE: ""
      FILE_RESOURCES_HOME: ${{ github.workspace }}
      ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      PASSWORD: ${{ secrets.PASSWORD }}
      WAREHOUSE: ${{ secrets.WAREHOUSE }}
      DATABASE: "CUR "
      SCHEMA: "SD"
      CUR_DATABASE: ${{ github.event.inputs.target_db }}
      CUR_SCHEMA: ${{ github.event.inputs.target_schema }}
      HIST_CUT_OFF_DT: ${{ github.event.inputs.hist_cut_off_dt }}
      TABLE: ${{ github.event.inputs.table }}
    steps:
    - uses: actions/checkout@v1
    - name: Installing SnowSQL
      run: |
        curl -o /tmp/snowsql-1.2.24-linux_x86_64.bash -0 https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.2/linux_x86_64/snowsql-1.2.24-linux_x86_64.bash
        SNOWSQL_DEST=~/bin SNOWSQL_LOGIN_SHELL=~/.profile bash /tmp/snowsql-1.2.24-linux_x86_64.bash
        echo "[connections.FIS_DEVELOPMENT]" >> ~/.snowsql/config
        echo "accountname = $ACCOUNT" >> ~/.snowsql/config
        echo "username = $USER" >> ~/.snowsql/config
        echo "password = \"$PASSWORD\"" >> ~/.snowsql/config
        echo "dbname = $DATABASE" >> ~/.snowsql/config
        echo "schemaname = $SCHEMA" >> ~/.snowsql/config
        echo "warehousename = $WAREHOUSE" >> ~/.snowsql/config

        # Defining the tables to process
        if [ "$TABLE" != "*" ]; then
          echo "$TABLE" > $GITHUB_WORKSPACE/.github/workflows/sdm_tables_list_names.txt
        fi

        declare -a ScriptsNames=$(cat $GITHUB_WORKSPACE/.github/workflows/sdm_tables_list_names.txt)

        #Hate doing this, THIS NEEDS TO BE PROPERLY HANDLE
        cat SDM/RDS/History/HELPER_HIST.sql | sed "s/$CUR_SCHEMA;/g"  > helper_script.sql
        cat helper_script.sql | head -n 10
        ~/bin/snowsql -c DEVELOPMENT -o exit_on_error=true -o variable_substitution=true -D HIST_CUT_OFF_DT="$HIST_CUT_OFF_DT" -f helper_script.sql
        STATUS_CODE=$?
        if [ "$STATUS_CODE" -eq 1 ]; then
          exit 1
        fi

        echo "FILES_PREPROCESSING"
        #THIS SECTION WILL REPLACE THE HARDCODED SDM SCHEMA FOR ANY SCHEMA IS DEFINED IN THE CONTEXT.
        for val in ${ScriptsNames["$@"]}; do
          echo $val
          FILE_PATH=$GITHUB_WORKSPACE/SDM/RDS/History/${val}_hist.sql
          if [[ -f "$FILE_PATH" ]]; then
            cat $FILE_PATH | sed "s/$CUR_SCHEMA;/g"  > $FILE_PATH.tmp
            mv $FILE_PATH.tmp $FILE_PATH
          else
            echo "File does not exist $FILE_PATH"
            exit 1
          fi
        done

        export PROJECT_HOME=$GITHUB_WORKSPACE
        
